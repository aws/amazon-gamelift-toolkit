// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package runner

import (
	"context"
	"sync"
)

// InstanceUpdaterMock is a mock implementation of InstanceUpdater.
//
//	func TestSomethingThatUsesInstanceUpdater(t *testing.T) {
//
//		// make and configure a mocked InstanceUpdater
//		mockedInstanceUpdater := &InstanceUpdaterMock{
//			UpdateFunc: func(ctx context.Context) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedInstanceUpdater in code that requires InstanceUpdater
//		// and then make assertions.
//
//	}
type InstanceUpdaterMock struct {
	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockUpdate sync.RWMutex
}

// Update calls UpdateFunc.
func (mock *InstanceUpdaterMock) Update(ctx context.Context) error {
	if mock.UpdateFunc == nil {
		panic("InstanceUpdaterMock.UpdateFunc: method is nil but InstanceUpdater.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedInstanceUpdater.UpdateCalls())
func (mock *InstanceUpdaterMock) UpdateCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
