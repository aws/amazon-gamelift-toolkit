// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package gamelift

import (
	"context"
	"github.com/aws/aws-sdk-go-v2/service/gamelift"
	"sync"
)

// AWSGameliftClientMock is a mock implementation of AWSGameliftClient.
//
//	func TestSomethingThatUsesAWSGameliftClient(t *testing.T) {
//
//		// make and configure a mocked AWSGameliftClient
//		mockedAWSGameliftClient := &AWSGameliftClientMock{
//			DescribeFleetAttributesFunc: func(ctx context.Context, params *gamelift.DescribeFleetAttributesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeFleetAttributesOutput, error) {
//				panic("mock out the DescribeFleetAttributes method")
//			},
//			DescribeFleetLocationAttributesFunc: func(ctx context.Context, params *gamelift.DescribeFleetLocationAttributesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeFleetLocationAttributesOutput, error) {
//				panic("mock out the DescribeFleetLocationAttributes method")
//			},
//			DescribeInstancesFunc: func(ctx context.Context, params *gamelift.DescribeInstancesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeInstancesOutput, error) {
//				panic("mock out the DescribeInstances method")
//			},
//			DescribeRuntimeConfigurationFunc: func(ctx context.Context, params *gamelift.DescribeRuntimeConfigurationInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
//				panic("mock out the DescribeRuntimeConfiguration method")
//			},
//			GetComputeAccessFunc: func(ctx context.Context, params *gamelift.GetComputeAccessInput, optFns ...func(*gamelift.Options)) (*gamelift.GetComputeAccessOutput, error) {
//				panic("mock out the GetComputeAccess method")
//			},
//			UpdateFleetPortSettingsFunc: func(ctx context.Context, params *gamelift.UpdateFleetPortSettingsInput, optFns ...func(*gamelift.Options)) (*gamelift.UpdateFleetPortSettingsOutput, error) {
//				panic("mock out the UpdateFleetPortSettings method")
//			},
//		}
//
//		// use mockedAWSGameliftClient in code that requires AWSGameliftClient
//		// and then make assertions.
//
//	}
type AWSGameliftClientMock struct {
	// DescribeFleetAttributesFunc mocks the DescribeFleetAttributes method.
	DescribeFleetAttributesFunc func(ctx context.Context, params *gamelift.DescribeFleetAttributesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeFleetAttributesOutput, error)

	// DescribeFleetLocationAttributesFunc mocks the DescribeFleetLocationAttributes method.
	DescribeFleetLocationAttributesFunc func(ctx context.Context, params *gamelift.DescribeFleetLocationAttributesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeFleetLocationAttributesOutput, error)

	// DescribeInstancesFunc mocks the DescribeInstances method.
	DescribeInstancesFunc func(ctx context.Context, params *gamelift.DescribeInstancesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeInstancesOutput, error)

	// DescribeRuntimeConfigurationFunc mocks the DescribeRuntimeConfiguration method.
	DescribeRuntimeConfigurationFunc func(ctx context.Context, params *gamelift.DescribeRuntimeConfigurationInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeRuntimeConfigurationOutput, error)

	// GetComputeAccessFunc mocks the GetComputeAccess method.
	GetComputeAccessFunc func(ctx context.Context, params *gamelift.GetComputeAccessInput, optFns ...func(*gamelift.Options)) (*gamelift.GetComputeAccessOutput, error)

	// UpdateFleetPortSettingsFunc mocks the UpdateFleetPortSettings method.
	UpdateFleetPortSettingsFunc func(ctx context.Context, params *gamelift.UpdateFleetPortSettingsInput, optFns ...func(*gamelift.Options)) (*gamelift.UpdateFleetPortSettingsOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// DescribeFleetAttributes holds details about calls to the DescribeFleetAttributes method.
		DescribeFleetAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *gamelift.DescribeFleetAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*gamelift.Options)
		}
		// DescribeFleetLocationAttributes holds details about calls to the DescribeFleetLocationAttributes method.
		DescribeFleetLocationAttributes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *gamelift.DescribeFleetLocationAttributesInput
			// OptFns is the optFns argument value.
			OptFns []func(*gamelift.Options)
		}
		// DescribeInstances holds details about calls to the DescribeInstances method.
		DescribeInstances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *gamelift.DescribeInstancesInput
			// OptFns is the optFns argument value.
			OptFns []func(*gamelift.Options)
		}
		// DescribeRuntimeConfiguration holds details about calls to the DescribeRuntimeConfiguration method.
		DescribeRuntimeConfiguration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *gamelift.DescribeRuntimeConfigurationInput
			// OptFns is the optFns argument value.
			OptFns []func(*gamelift.Options)
		}
		// GetComputeAccess holds details about calls to the GetComputeAccess method.
		GetComputeAccess []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *gamelift.GetComputeAccessInput
			// OptFns is the optFns argument value.
			OptFns []func(*gamelift.Options)
		}
		// UpdateFleetPortSettings holds details about calls to the UpdateFleetPortSettings method.
		UpdateFleetPortSettings []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *gamelift.UpdateFleetPortSettingsInput
			// OptFns is the optFns argument value.
			OptFns []func(*gamelift.Options)
		}
	}
	lockDescribeFleetAttributes         sync.RWMutex
	lockDescribeFleetLocationAttributes sync.RWMutex
	lockDescribeInstances               sync.RWMutex
	lockDescribeRuntimeConfiguration    sync.RWMutex
	lockGetComputeAccess                sync.RWMutex
	lockUpdateFleetPortSettings         sync.RWMutex
}

// DescribeFleetAttributes calls DescribeFleetAttributesFunc.
func (mock *AWSGameliftClientMock) DescribeFleetAttributes(ctx context.Context, params *gamelift.DescribeFleetAttributesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeFleetAttributesOutput, error) {
	if mock.DescribeFleetAttributesFunc == nil {
		panic("AWSGameliftClientMock.DescribeFleetAttributesFunc: method is nil but AWSGameliftClient.DescribeFleetAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *gamelift.DescribeFleetAttributesInput
		OptFns []func(*gamelift.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFleetAttributes.Lock()
	mock.calls.DescribeFleetAttributes = append(mock.calls.DescribeFleetAttributes, callInfo)
	mock.lockDescribeFleetAttributes.Unlock()
	return mock.DescribeFleetAttributesFunc(ctx, params, optFns...)
}

// DescribeFleetAttributesCalls gets all the calls that were made to DescribeFleetAttributes.
// Check the length with:
//
//	len(mockedAWSGameliftClient.DescribeFleetAttributesCalls())
func (mock *AWSGameliftClientMock) DescribeFleetAttributesCalls() []struct {
	Ctx    context.Context
	Params *gamelift.DescribeFleetAttributesInput
	OptFns []func(*gamelift.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *gamelift.DescribeFleetAttributesInput
		OptFns []func(*gamelift.Options)
	}
	mock.lockDescribeFleetAttributes.RLock()
	calls = mock.calls.DescribeFleetAttributes
	mock.lockDescribeFleetAttributes.RUnlock()
	return calls
}

// DescribeFleetLocationAttributes calls DescribeFleetLocationAttributesFunc.
func (mock *AWSGameliftClientMock) DescribeFleetLocationAttributes(ctx context.Context, params *gamelift.DescribeFleetLocationAttributesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeFleetLocationAttributesOutput, error) {
	if mock.DescribeFleetLocationAttributesFunc == nil {
		panic("AWSGameliftClientMock.DescribeFleetLocationAttributesFunc: method is nil but AWSGameliftClient.DescribeFleetLocationAttributes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *gamelift.DescribeFleetLocationAttributesInput
		OptFns []func(*gamelift.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeFleetLocationAttributes.Lock()
	mock.calls.DescribeFleetLocationAttributes = append(mock.calls.DescribeFleetLocationAttributes, callInfo)
	mock.lockDescribeFleetLocationAttributes.Unlock()
	return mock.DescribeFleetLocationAttributesFunc(ctx, params, optFns...)
}

// DescribeFleetLocationAttributesCalls gets all the calls that were made to DescribeFleetLocationAttributes.
// Check the length with:
//
//	len(mockedAWSGameliftClient.DescribeFleetLocationAttributesCalls())
func (mock *AWSGameliftClientMock) DescribeFleetLocationAttributesCalls() []struct {
	Ctx    context.Context
	Params *gamelift.DescribeFleetLocationAttributesInput
	OptFns []func(*gamelift.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *gamelift.DescribeFleetLocationAttributesInput
		OptFns []func(*gamelift.Options)
	}
	mock.lockDescribeFleetLocationAttributes.RLock()
	calls = mock.calls.DescribeFleetLocationAttributes
	mock.lockDescribeFleetLocationAttributes.RUnlock()
	return calls
}

// DescribeInstances calls DescribeInstancesFunc.
func (mock *AWSGameliftClientMock) DescribeInstances(ctx context.Context, params *gamelift.DescribeInstancesInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeInstancesOutput, error) {
	if mock.DescribeInstancesFunc == nil {
		panic("AWSGameliftClientMock.DescribeInstancesFunc: method is nil but AWSGameliftClient.DescribeInstances was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *gamelift.DescribeInstancesInput
		OptFns []func(*gamelift.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeInstances.Lock()
	mock.calls.DescribeInstances = append(mock.calls.DescribeInstances, callInfo)
	mock.lockDescribeInstances.Unlock()
	return mock.DescribeInstancesFunc(ctx, params, optFns...)
}

// DescribeInstancesCalls gets all the calls that were made to DescribeInstances.
// Check the length with:
//
//	len(mockedAWSGameliftClient.DescribeInstancesCalls())
func (mock *AWSGameliftClientMock) DescribeInstancesCalls() []struct {
	Ctx    context.Context
	Params *gamelift.DescribeInstancesInput
	OptFns []func(*gamelift.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *gamelift.DescribeInstancesInput
		OptFns []func(*gamelift.Options)
	}
	mock.lockDescribeInstances.RLock()
	calls = mock.calls.DescribeInstances
	mock.lockDescribeInstances.RUnlock()
	return calls
}

// DescribeRuntimeConfiguration calls DescribeRuntimeConfigurationFunc.
func (mock *AWSGameliftClientMock) DescribeRuntimeConfiguration(ctx context.Context, params *gamelift.DescribeRuntimeConfigurationInput, optFns ...func(*gamelift.Options)) (*gamelift.DescribeRuntimeConfigurationOutput, error) {
	if mock.DescribeRuntimeConfigurationFunc == nil {
		panic("AWSGameliftClientMock.DescribeRuntimeConfigurationFunc: method is nil but AWSGameliftClient.DescribeRuntimeConfiguration was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *gamelift.DescribeRuntimeConfigurationInput
		OptFns []func(*gamelift.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockDescribeRuntimeConfiguration.Lock()
	mock.calls.DescribeRuntimeConfiguration = append(mock.calls.DescribeRuntimeConfiguration, callInfo)
	mock.lockDescribeRuntimeConfiguration.Unlock()
	return mock.DescribeRuntimeConfigurationFunc(ctx, params, optFns...)
}

// DescribeRuntimeConfigurationCalls gets all the calls that were made to DescribeRuntimeConfiguration.
// Check the length with:
//
//	len(mockedAWSGameliftClient.DescribeRuntimeConfigurationCalls())
func (mock *AWSGameliftClientMock) DescribeRuntimeConfigurationCalls() []struct {
	Ctx    context.Context
	Params *gamelift.DescribeRuntimeConfigurationInput
	OptFns []func(*gamelift.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *gamelift.DescribeRuntimeConfigurationInput
		OptFns []func(*gamelift.Options)
	}
	mock.lockDescribeRuntimeConfiguration.RLock()
	calls = mock.calls.DescribeRuntimeConfiguration
	mock.lockDescribeRuntimeConfiguration.RUnlock()
	return calls
}

// GetComputeAccess calls GetComputeAccessFunc.
func (mock *AWSGameliftClientMock) GetComputeAccess(ctx context.Context, params *gamelift.GetComputeAccessInput, optFns ...func(*gamelift.Options)) (*gamelift.GetComputeAccessOutput, error) {
	if mock.GetComputeAccessFunc == nil {
		panic("AWSGameliftClientMock.GetComputeAccessFunc: method is nil but AWSGameliftClient.GetComputeAccess was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *gamelift.GetComputeAccessInput
		OptFns []func(*gamelift.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockGetComputeAccess.Lock()
	mock.calls.GetComputeAccess = append(mock.calls.GetComputeAccess, callInfo)
	mock.lockGetComputeAccess.Unlock()
	return mock.GetComputeAccessFunc(ctx, params, optFns...)
}

// GetComputeAccessCalls gets all the calls that were made to GetComputeAccess.
// Check the length with:
//
//	len(mockedAWSGameliftClient.GetComputeAccessCalls())
func (mock *AWSGameliftClientMock) GetComputeAccessCalls() []struct {
	Ctx    context.Context
	Params *gamelift.GetComputeAccessInput
	OptFns []func(*gamelift.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *gamelift.GetComputeAccessInput
		OptFns []func(*gamelift.Options)
	}
	mock.lockGetComputeAccess.RLock()
	calls = mock.calls.GetComputeAccess
	mock.lockGetComputeAccess.RUnlock()
	return calls
}

// UpdateFleetPortSettings calls UpdateFleetPortSettingsFunc.
func (mock *AWSGameliftClientMock) UpdateFleetPortSettings(ctx context.Context, params *gamelift.UpdateFleetPortSettingsInput, optFns ...func(*gamelift.Options)) (*gamelift.UpdateFleetPortSettingsOutput, error) {
	if mock.UpdateFleetPortSettingsFunc == nil {
		panic("AWSGameliftClientMock.UpdateFleetPortSettingsFunc: method is nil but AWSGameliftClient.UpdateFleetPortSettings was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *gamelift.UpdateFleetPortSettingsInput
		OptFns []func(*gamelift.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockUpdateFleetPortSettings.Lock()
	mock.calls.UpdateFleetPortSettings = append(mock.calls.UpdateFleetPortSettings, callInfo)
	mock.lockUpdateFleetPortSettings.Unlock()
	return mock.UpdateFleetPortSettingsFunc(ctx, params, optFns...)
}

// UpdateFleetPortSettingsCalls gets all the calls that were made to UpdateFleetPortSettings.
// Check the length with:
//
//	len(mockedAWSGameliftClient.UpdateFleetPortSettingsCalls())
func (mock *AWSGameliftClientMock) UpdateFleetPortSettingsCalls() []struct {
	Ctx    context.Context
	Params *gamelift.UpdateFleetPortSettingsInput
	OptFns []func(*gamelift.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *gamelift.UpdateFleetPortSettingsInput
		OptFns []func(*gamelift.Options)
	}
	mock.lockUpdateFleetPortSettings.RLock()
	calls = mock.calls.UpdateFleetPortSettings
	mock.lockUpdateFleetPortSettings.RUnlock()
	return calls
}
