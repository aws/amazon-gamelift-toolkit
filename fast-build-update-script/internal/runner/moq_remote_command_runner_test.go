// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package runner

import (
	"context"
	"golang.org/x/crypto/ssh"
	"sync"
)

// CommandRunnerMock is a mock implementation of CommandRunner.
//
//	func TestSomethingThatUsesCommandRunner(t *testing.T) {
//
//		// make and configure a mocked CommandRunner
//		mockedCommandRunner := &CommandRunnerMock{
//			RunFunc: func(ctx context.Context, remotePublicKey ssh.PublicKey) error {
//				panic("mock out the Run method")
//			},
//		}
//
//		// use mockedCommandRunner in code that requires CommandRunner
//		// and then make assertions.
//
//	}
type CommandRunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(ctx context.Context, remotePublicKey ssh.PublicKey) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RemotePublicKey is the remotePublicKey argument value.
			RemotePublicKey ssh.PublicKey
		}
	}
	lockRun sync.RWMutex
}

// Run calls RunFunc.
func (mock *CommandRunnerMock) Run(ctx context.Context, remotePublicKey ssh.PublicKey) error {
	if mock.RunFunc == nil {
		panic("CommandRunnerMock.RunFunc: method is nil but CommandRunner.Run was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		RemotePublicKey ssh.PublicKey
	}{
		Ctx:             ctx,
		RemotePublicKey: remotePublicKey,
	}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	return mock.RunFunc(ctx, remotePublicKey)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//
//	len(mockedCommandRunner.RunCalls())
func (mock *CommandRunnerMock) RunCalls() []struct {
	Ctx             context.Context
	RemotePublicKey ssh.PublicKey
} {
	var calls []struct {
		Ctx             context.Context
		RemotePublicKey ssh.PublicKey
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
